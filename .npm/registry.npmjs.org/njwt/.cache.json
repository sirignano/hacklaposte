{"_id":"njwt","_rev":"11-ae3fd8dae520858d4341b8c286c6c22f","name":"njwt","description":"JWT Library for Node.js","dist-tags":{"latest":"0.2.3"},"versions":{"0.0.0":{"name":"njwt","version":"0.0.0","description":"JWT Library for Node.js","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/jwtk/njwt"},"keywords":["jwt"],"author":{"name":"Stormpath, Inc."},"license":"Apache 2.0","bugs":{"url":"https://github.com/jwtk/njwt/issues"},"homepage":"https://github.com/jwtk/njwt","_id":"njwt@0.0.0","dist":{"shasum":"87a5f84aa520deb433982b49f6ffd974a9c992c4","tarball":"http://registry.npmjs.org/njwt/-/njwt-0.0.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"robertjd","email":"robert@robertjd.com"},"maintainers":[{"name":"robertjd","email":"robert@robertjd.com"}],"directories":{}},"0.0.1":{"name":"njwt","version":"0.0.1","description":"JWT Library for Node.js","main":"index.js","scripts":{"test":"echo \"Error: no test specified\" && exit 1"},"repository":{"type":"git","url":"https://github.com/jwtk/njwt"},"keywords":["jwt"],"author":{"name":"Stormpath, Inc."},"license":"Apache 2.0","bugs":{"url":"https://github.com/jwtk/njwt/issues"},"homepage":"https://github.com/jwtk/njwt","_id":"njwt@0.0.1","dist":{"shasum":"f52d8a53bc9ee138993a33c7772a21e2cbb3a7d6","tarball":"http://registry.npmjs.org/njwt/-/njwt-0.0.1.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"robertjd","email":"robert@robertjd.com"},"maintainers":[{"name":"robertjd","email":"robert@robertjd.com"},{"name":"lhazlewood","email":"les@hazlewood.com"}],"directories":{}},"0.2.0":{"name":"njwt","version":"0.2.0","description":"JWT Library for Node.js","main":"index.js","scripts":{"test":"istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec --no-timeouts; cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js; rm -rf ./coverage","test-watch":"mocha --timeout=5000 --reporter dot --check-leaks -w ./*.js test/ ","test-debug":"mocha --timeout=5000 --debug --reporter dot --check-leaks -w ./*.js test/ ","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --timeout=5000 --reporter dot --check-leaks test/"},"repository":{"type":"git","url":"https://github.com/jwtk/njwt"},"keywords":["jwt"],"author":{"name":"Stormpath, Inc."},"license":"Apache 2.0","bugs":{"url":"https://github.com/jwtk/njwt/issues"},"homepage":"https://github.com/jwtk/njwt","dependencies":{"uuid":"^2.0.1"},"devDependencies":{"mocha":"^2.2.3","chai":"^2.2.0","ursa":"^0.8.4","istanbul":"^0.3.15","jsonwebtoken":"^5.0.2","jwt-simple":"^0.3.0","coveralls":"^2.11.2"},"_id":"njwt@0.2.0","dist":{"shasum":"58b7617ff2ee6f5deba58ca82395fff3c8b5e992","tarball":"http://registry.npmjs.org/njwt/-/njwt-0.2.0.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"robertjd","email":"robert@robertjd.com"},"maintainers":[{"name":"robertjd","email":"robert@robertjd.com"},{"name":"lhazlewood","email":"les@hazlewood.com"}],"directories":{}},"0.2.1":{"name":"njwt","version":"0.2.1","description":"JWT Library for Node.js","main":"index.js","scripts":{"test":"istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec --no-timeouts; cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js; rm -rf ./coverage","test-watch":"mocha --timeout=5000 --reporter dot --check-leaks -w ./*.js test/ ","test-debug":"mocha --timeout=5000 --debug --reporter dot --check-leaks -w ./*.js test/ ","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --timeout=5000 --reporter dot --check-leaks test/"},"repository":{"type":"git","url":"https://github.com/jwtk/njwt"},"keywords":["jwt"],"author":{"name":"Stormpath, Inc."},"license":"Apache 2.0","bugs":{"url":"https://github.com/jwtk/njwt/issues"},"homepage":"https://github.com/jwtk/njwt","dependencies":{"uuid":"^2.0.1"},"devDependencies":{"mocha":"^2.2.3","chai":"^2.2.0","ursa":"^0.8.4","istanbul":"^0.3.15","jsonwebtoken":"^5.0.2","jwt-simple":"^0.3.0","coveralls":"^2.11.2"},"_id":"njwt@0.2.1","dist":{"shasum":"81107213949b65751e134c4c79334e59dc0ceb5a","tarball":"http://registry.npmjs.org/njwt/-/njwt-0.2.1.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"robertjd","email":"robert@robertjd.com"},"maintainers":[{"name":"robertjd","email":"robert@robertjd.com"},{"name":"lhazlewood","email":"les@hazlewood.com"}],"directories":{}},"0.2.2":{"name":"njwt","version":"0.2.2","description":"JWT Library for Node.js","main":"index.js","scripts":{"test":"istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec --no-timeouts; cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js; rm -rf ./coverage","test-watch":"mocha --timeout=5000 --reporter dot --check-leaks -w ./*.js test/ ","test-debug":"mocha --timeout=5000 --debug --reporter dot --check-leaks -w ./*.js test/ ","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --timeout=5000 --reporter dot --check-leaks test/"},"repository":{"type":"git","url":"https://github.com/jwtk/njwt"},"keywords":["jwt"],"author":{"name":"Stormpath, Inc."},"license":"Apache 2.0","bugs":{"url":"https://github.com/jwtk/njwt/issues"},"homepage":"https://github.com/jwtk/njwt","dependencies":{"uuid":"^2.0.1"},"devDependencies":{"mocha":"^2.2.3","chai":"^2.2.0","ursa":"^0.8.4","istanbul":"^0.3.15","jsonwebtoken":"^5.0.2","jwt-simple":"^0.3.0","coveralls":"^2.11.2"},"_id":"njwt@0.2.2","dist":{"shasum":"487fc364662176aaeedf870dafe362bedbcbd2f5","tarball":"http://registry.npmjs.org/njwt/-/njwt-0.2.2.tgz"},"_from":".","_npmVersion":"1.4.3","_npmUser":{"name":"robertjd","email":"robert@robertjd.com"},"maintainers":[{"name":"robertjd","email":"robert@robertjd.com"},{"name":"lhazlewood","email":"les@hazlewood.com"}],"directories":{}},"0.2.3":{"name":"njwt","version":"0.2.3","description":"JWT Library for Node.js","main":"index.js","scripts":{"test":"istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec --no-timeouts; cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js; rm -rf ./coverage","test-watch":"mocha --timeout=5000 --reporter dot --check-leaks -w ./*.js test/ ","test-debug":"mocha --timeout=5000 --debug --reporter dot --check-leaks -w ./*.js test/ ","test-cov":"istanbul cover node_modules/mocha/bin/_mocha -- --timeout=5000 --reporter dot --check-leaks test/"},"repository":{"type":"git","url":"https://github.com/jwtk/njwt"},"keywords":["jwt"],"author":{"name":"Stormpath, Inc."},"license":"Apache 2.0","bugs":{"url":"https://github.com/jwtk/njwt/issues"},"homepage":"https://github.com/jwtk/njwt","dependencies":{"uuid":"^2.0.1"},"devDependencies":{"mocha":"^2.2.3","chai":"^2.2.0","ursa":"^0.8.4","istanbul":"^0.3.15","jsonwebtoken":"^5.0.2","jwt-simple":"^0.3.0","coveralls":"^2.11.2"},"gitHead":"9efa1639f761afac0eb648482c3fc4f40000b9df","_id":"njwt@0.2.3","_shasum":"07b50ed6395733db84fb5982336b2264827ee96e","_from":".","_npmVersion":"2.7.4","_nodeVersion":"0.12.2","_npmUser":{"name":"robertjd","email":"robert@robertjd.com"},"maintainers":[{"name":"robertjd","email":"robert@robertjd.com"},{"name":"lhazlewood","email":"les@hazlewood.com"}],"dist":{"shasum":"07b50ed6395733db84fb5982336b2264827ee96e","tarball":"http://registry.npmjs.org/njwt/-/njwt-0.2.3.tgz"},"directories":{}}},"readme":"# nJwt - JWTs for Node.js\n\n\"Nin-Jot\" /ˈnɪn.dʒɑt/\n\n[![NPM Version](https://img.shields.io/npm/v/njwt.svg?style=flat)](https://npmjs.org/package/njwt)\n[![NPM Downloads](http://img.shields.io/npm/dm/njwt.svg?style=flat)](https://npmjs.org/package/njwt)\n[![Build Status](https://img.shields.io/travis/jwtk/njwt.svg?style=flat)](https://travis-ci.org/jwtk/njwt)\n[![Coverage Status](https://coveralls.io/repos/jwtk/njwt/badge.svg?branch=master)](https://coveralls.io/r/jwtk/njwt?branch=master)\n\nnJwt is the cleanest JSON Web Token (JWT) library for Node.js developers. nJwt\nremoves all the complexities around JWTs, and gives you a simple, intuitive API,\nthat allows you to securely make and use JWTs in your applications without\nneeding to read [rfc7519](http://www.rfc-editor.org/rfc/rfc7519.txt).\n\n### Creating Secure, Signed JWTs\n\nJWTs expect *\"claims\"*, they a set of assertions about who the user is and what\nthey can do.  The most common use case for JWTs is to declare the \"scope\" of the\naccess token, which is a list of things that the holder of the token (the user)\nis allowed to do.\n\nJWTs should be signed, otherwise you can't verify that they were created by you.\nOur library expects that you give us a highly random signing key for\nsigning tokens.  We use the `HS256` algorithm by default.\n\nWhile the claims are completely up to you, we do recommend setting the \"Subject\"\nand \"Audience\" fields.\n\nJWTs commonly contain the `iat` and `exp` claims, which declare the time the\ntoken was issued and when it expires.  Our library will create these for you,\nwith a default expiration of 1 hour.\n\n````javascript\nvar uuid = require('uuid');\nvar nJwt = require('nJwt');\nvar signingKey = uuid.v4(); // For example purposes\n\nvar claims = {\n  iss: \"http://myapp.com/\",  // The URL of your service\n  sub: \"users/user1234\",    // The UID of the user in your system\n  scope: \"self, admins\"\n}\n\nvar jwt = nJwt.create(claims,signingKey)\n````\n\nOnce you have creted the JWT, you can look at it's internal structure by\nlogging it to the console.  This is our internal representation of the token,\nthis is not what you'll send to your end user:\n````javascript\nconsole.log(jwt);\n````\n````json\n{\n  \"header\": {\n    \"typ\": \"JWT\",\n    \"alg\": \"HS256\"\n  },\n  \"body\": {\n    \"jti\": \"c84280e6-0021-4e69-ad76-7a3fdd3d4ede\",\n    \"iat\": 1434660338,\n    \"exp\": 1434663938,\n    \"iss\": \"http://myapp.com/\",\n    \"sub\": \"users/user1234\",\n    \"scope\": [\"self\",\"admins\"]\n  }\n}\n````\nOur library has added the `jti` field for you, this is a random ID that will be\nunique for every token.  You can use this if you want to create a database of\ntokens that have been issued to the user.\n\nWhen you are ready to give the token to your end user, you need to compact it.\nThis will turn it into a Base64 URL encoded string, so it'l be safe to pass\naround in browsers without getting any strange formatting applied to it.\n````javascript\nvar token = jwt.compact();\nconsole.log(token);\n````\n````\neyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiJ9.eyJmb28iOiJiYXIiLCJpYXQiOjE0MzQ0Nzk4ODN9.HQyx15jWm1upqsrKSf89X_iP0sg7N46a9pqBVGPMYdiqZeuU_ZZOdU-zizHJoIHMIJxtEWzpSMaVubJW0AJsTqjqQf6GoJ4cmFAfmfUFXmMC4Xv5oc4UqvGizpoLjfZedd834PcwbS-WskZcL4pVNmBIGRtDXkoU1j2X1P5M_sNJ9lYZ5vITyqe4MYJovQzNdQziUNhcMI5wkXncV7XzGInBeQsPquASWVG4gb3Y--k1P3xWA4Df3rKeEQBbInDKXczvDpfIlTojx4Ch8OM8vXWWNxW-mIQrV31wRrS9XtNoig7irx8N0MzokiYKrQ8WP_ezPicHvVPIHhz-InOw\n````\n\n### Verifying Signed JWTs\n\nThe end user will use their JWT to authenticate themselves with your service.\nWhen they present the JWT, you want to check the token to ensure that it's valid.\nThis library does the following checks when you call the `verify` method:\n\n* It was created by you (by verifying the signature, using the secret signing key)\n* It is hasn't been modified (e.g. some claims were maliciously added)\n* It hasn't expired\n\nTo verify a previously issued token, use the `verify` method.  You must give it\nthe same signing key that you are using to create tokens:\n````javascript\nnJwt.verify(token,signingKey,function(err,verifiedJwt){\n  if(err){\n    console.log(err); // Token has expired, has been tampered with, etc\n  }else{\n    console.log(verifiedJwt); // Will contain the header and body\n  }\n});\n````\n\nIf validation fails you can look at `err.message` to understand the problem.  If\nthe header and body of the JWT were parse-able (not not verifiable) they will\nbe provided as objects at `err.parsedHeader` and `err.parsedBody`.\n\nYou can also use verify synchronously, in which case the errors will be thrown:\n\n````javascript\ntry{\n  verifiedJwt = nJwt.verify(token,signingKey);\n}catch(e){\n  console.log(e);\n}\n````\n\n### Changing the algorithm\n\nIf you want to change the algorithm from the default `HS256`, you can do so\nby passing it as a third argument to the `create` or `verify` methods:\n\n````javascript\nvar jwt = nJwt.create(claims,signingKey,'HS512');\n````\n````javascript\nnJwt.verify(token,signingKey, 'HS512');\n````\n\nSee the table below for a list of supported algorithms.  If using RSA key pairs,\nthe public key will be the signing key parameter.\n\n### Customizing the token\n\nWhile we've chosen secure, sensible defaults for you, you may need to change it\nup.\n\n#### Claims\n\nIf you need to provide custom claims, simply supply them to the `create` method\nor add them manually to the claims body after JWT is created.  These two\nexamples create the same claims body:\n\n```javascript\nvar claims = {\n  scope: 'admins'\n}\nvar jwt = nJwt.create(claims,secret);\n````\n```javascript\nvar jwt = nJwt.create({},secret);\njwt.body.scope = 'admins';\n````\n\n#### Expiration Claim\n\nA convenience method is supplied for modifying the `exp` claim.  You can modify\nthe `exp` claim by passing a `Date` object, or a millisecond value, to the\n`setExpiration` method:\n\n```javascript\nvar jwt = nJwt.create(claims,secret);\n\njwt.setExpiration(new Date('2015-07-01')); // A specific date\njwt.setExpiration(new Date().getTime() + (60*60*1000)); // One hour from now\njwt.setExpiration(); // Remove the exp claim\n```\n\n\n## Supported Algorithms\n\n\"alg\" Value | Algorithm used\n------------|----------------------------\nHS256 | HMAC using SHA-256 hash algorithm\nHS384 | HMAC using SHA-384 hash algorithm\nHS512 | HMAC using SHA-512 hash algorithm\nRS256 | RSASSA using SHA-256 hash algorithm\nRS384 | RSASSA using SHA-384 hash algorithm\nRS512 | RSASSA using SHA-512 hash algorithm\nES256 | ECDSA using P-256 curve and SHA-256 hash algorithm\nES384 | ECDSA using P-384 curve and SHA-384 hash algorithm\nES512 | ECDSA using P-521 curve and SHA-512 hash algorithm\nnone | No digital signature or MAC value included\n\n## Unsupported features\n\nThe following features are not yet supported by this library:\n\n* Encrypting the JWT (aka JWE)\n* Signing key resolver (using the `kid` field)","maintainers":[{"name":"robertjd","email":"robert@robertjd.com"},{"name":"lhazlewood","email":"les@hazlewood.com"}],"time":{"modified":"2015-10-23T01:56:49.923Z","created":"2015-01-26T22:01:41.582Z","0.0.0":"2015-01-26T22:01:41.582Z","0.0.1":"2015-01-29T23:35:34.036Z","0.2.0":"2015-06-18T21:47:43.844Z","0.2.1":"2015-08-10T23:08:16.233Z","0.2.2":"2015-08-11T23:54:58.203Z","0.2.3":"2015-10-23T01:56:49.923Z"},"homepage":"https://github.com/jwtk/njwt","keywords":["jwt"],"repository":{"type":"git","url":"https://github.com/jwtk/njwt"},"author":{"name":"Stormpath, Inc."},"bugs":{"url":"https://github.com/jwtk/njwt/issues"},"license":"Apache 2.0","readmeFilename":"README.md","users":{"tkalfigo":true,"craigdmckenna":true},"_attachments":{},"_etag":"\"28SYID6KIAQYP4K1D37HWRSRP\""}